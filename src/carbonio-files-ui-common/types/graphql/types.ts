/*
 * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 */
/* eslint-disable camelcase,no-shadow,@typescript-eslint/ban-types */
// THIS FILE IS AUTOGENERATED BY GRAPHQL-CODEGEN. DO NOT EDIT!
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

import * as ClientTypes from './client-types';

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {
	[_ in K]?: never;
};
export type Incremental<T> =
	| T
	| { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
	ID: { input: string; output: string };
	String: { input: string; output: string };
	Boolean: { input: boolean; output: boolean };
	Int: { input: number; output: number };
	Float: { input: number; output: number };
	DateTime: { input: number; output: number };
	UploadItem: { input: ClientTypes.UploadItem; output: ClientTypes.UploadItem };
};

export type Account = DistributionList | User;

export type CollaborationLink = {
	__typename?: 'CollaborationLink';
	created_at: Scalars['DateTime']['output'];
	id: Scalars['ID']['output'];
	node: File | Folder;
	permission: SharePermission;
	url: Scalars['String']['output'];
};

export type Config = {
	__typename?: 'Config';
	name: Scalars['String']['output'];
	value: Scalars['String']['output'];
};

export type DistributionList = {
	__typename?: 'DistributionList';
	id: Scalars['ID']['output'];
	name: Scalars['String']['output'];
	users: Array<Maybe<User>>;
};

export type DistributionListUsersArgs = {
	cursor?: InputMaybe<Scalars['String']['input']>;
	limit: Scalars['Int']['input'];
};

export type File = Node & {
	__typename?: 'File';
	cloned_from_version?: Maybe<Scalars['Int']['output']>;
	collaboration_links: Array<Maybe<CollaborationLink>>;
	created_at: Scalars['DateTime']['output'];
	creator: User;
	description: Scalars['String']['output'];
	extension?: Maybe<Scalars['String']['output']>;
	flagged: Scalars['Boolean']['output'];
	id: Scalars['ID']['output'];
	keep_forever: Scalars['Boolean']['output'];
	last_editor?: Maybe<User>;
	links: Array<Maybe<Link>>;
	mime_type: Scalars['String']['output'];
	name: Scalars['String']['output'];
	owner?: Maybe<User>;
	parent?: Maybe<File | Folder>;
	permissions: Permissions;
	rootId?: Maybe<Scalars['ID']['output']>;
	share?: Maybe<Share>;
	shares: Array<Maybe<Share>>;
	size: Scalars['Float']['output'];
	type: NodeType;
	updated_at: Scalars['DateTime']['output'];
	version: Scalars['Int']['output'];
};

export type FileShareArgs = {
	share_target_id: Scalars['ID']['input'];
};

export type FileSharesArgs = {
	cursor?: InputMaybe<Scalars['String']['input']>;
	limit: Scalars['Int']['input'];
	sorts?: InputMaybe<Array<ShareSort>>;
};

export type Folder = Node & {
	__typename?: 'Folder';
	children: NodePage;
	collaboration_links: Array<Maybe<CollaborationLink>>;
	created_at: Scalars['DateTime']['output'];
	creator: User;
	description: Scalars['String']['output'];
	flagged: Scalars['Boolean']['output'];
	id: Scalars['ID']['output'];
	last_editor?: Maybe<User>;
	links: Array<Maybe<Link>>;
	name: Scalars['String']['output'];
	owner?: Maybe<User>;
	parent?: Maybe<File | Folder>;
	permissions: Permissions;
	rootId?: Maybe<Scalars['ID']['output']>;
	share?: Maybe<Share>;
	shares: Array<Maybe<Share>>;
	type: NodeType;
	updated_at: Scalars['DateTime']['output'];
};

export type FolderChildrenArgs = {
	limit: Scalars['Int']['input'];
	page_token?: InputMaybe<Scalars['String']['input']>;
	sort: NodeSort;
};

export type FolderShareArgs = {
	share_target_id: Scalars['ID']['input'];
};

export type FolderSharesArgs = {
	cursor?: InputMaybe<Scalars['String']['input']>;
	limit: Scalars['Int']['input'];
	sorts?: InputMaybe<Array<ShareSort>>;
};

export type Link = {
	__typename?: 'Link';
	created_at: Scalars['DateTime']['output'];
	description?: Maybe<Scalars['String']['output']>;
	expires_at?: Maybe<Scalars['DateTime']['output']>;
	id: Scalars['ID']['output'];
	node: File | Folder;
	url?: Maybe<Scalars['String']['output']>;
};

export type Mutation = {
	__typename?: 'Mutation';
	cloneVersion: File;
	copyNodes?: Maybe<Array<File | Folder>>;
	createCollaborationLink: CollaborationLink;
	createFolder: File | Folder;
	createLink: Link;
	createShare: Share;
	deleteCollaborationLinks: Array<Maybe<Scalars['ID']['output']>>;
	deleteLinks: Array<Maybe<Scalars['ID']['output']>>;
	deleteNodes?: Maybe<Array<Scalars['ID']['output']>>;
	deleteShare: Scalars['Boolean']['output'];
	deleteVersions: Array<Maybe<Scalars['Int']['output']>>;
	flagNodes?: Maybe<Array<Scalars['ID']['output']>>;
	keepVersions: Array<Maybe<Scalars['Int']['output']>>;
	moveNodes?: Maybe<Array<File | Folder>>;
	restoreNodes?: Maybe<Array<Maybe<File | Folder>>>;
	trashNodes?: Maybe<Array<Scalars['ID']['output']>>;
	updateLink?: Maybe<Link>;
	updateNode: File | Folder;
	updateShare?: Maybe<Share>;
};

export type MutationCloneVersionArgs = {
	node_id: Scalars['ID']['input'];
	version: Scalars['Int']['input'];
};

export type MutationCopyNodesArgs = {
	destination_id: Scalars['ID']['input'];
	node_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type MutationCreateCollaborationLinkArgs = {
	node_id: Scalars['ID']['input'];
	permission: SharePermission;
};

export type MutationCreateFolderArgs = {
	destination_id: Scalars['String']['input'];
	name: Scalars['String']['input'];
};

export type MutationCreateLinkArgs = {
	description?: InputMaybe<Scalars['String']['input']>;
	expires_at?: InputMaybe<Scalars['DateTime']['input']>;
	node_id: Scalars['ID']['input'];
};

export type MutationCreateShareArgs = {
	custom_message?: InputMaybe<Scalars['String']['input']>;
	expires_at?: InputMaybe<Scalars['DateTime']['input']>;
	node_id: Scalars['ID']['input'];
	permission: SharePermission;
	share_target_id: Scalars['ID']['input'];
};

export type MutationDeleteCollaborationLinksArgs = {
	collaboration_link_ids: Array<Scalars['ID']['input']>;
};

export type MutationDeleteLinksArgs = {
	link_ids: Array<Scalars['ID']['input']>;
};

export type MutationDeleteNodesArgs = {
	node_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type MutationDeleteShareArgs = {
	node_id: Scalars['ID']['input'];
	share_target_id: Scalars['ID']['input'];
};

export type MutationDeleteVersionsArgs = {
	node_id: Scalars['ID']['input'];
	versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type MutationFlagNodesArgs = {
	flag: Scalars['Boolean']['input'];
	node_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type MutationKeepVersionsArgs = {
	keep_forever: Scalars['Boolean']['input'];
	node_id: Scalars['ID']['input'];
	versions: Array<Scalars['Int']['input']>;
};

export type MutationMoveNodesArgs = {
	destination_id: Scalars['ID']['input'];
	node_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type MutationRestoreNodesArgs = {
	node_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type MutationTrashNodesArgs = {
	node_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type MutationUpdateLinkArgs = {
	description?: InputMaybe<Scalars['String']['input']>;
	expires_at?: InputMaybe<Scalars['DateTime']['input']>;
	link_id: Scalars['ID']['input'];
};

export type MutationUpdateNodeArgs = {
	description?: InputMaybe<Scalars['String']['input']>;
	flagged?: InputMaybe<Scalars['Boolean']['input']>;
	name?: InputMaybe<Scalars['String']['input']>;
	node_id: Scalars['String']['input'];
};

export type MutationUpdateShareArgs = {
	expires_at?: InputMaybe<Scalars['DateTime']['input']>;
	node_id: Scalars['ID']['input'];
	permission?: InputMaybe<SharePermission>;
	share_target_id: Scalars['ID']['input'];
};

export type Node = {
	collaboration_links: Array<Maybe<CollaborationLink>>;
	created_at: Scalars['DateTime']['output'];
	creator: User;
	description: Scalars['String']['output'];
	flagged: Scalars['Boolean']['output'];
	id: Scalars['ID']['output'];
	last_editor?: Maybe<User>;
	links: Array<Maybe<Link>>;
	name: Scalars['String']['output'];
	owner?: Maybe<User>;
	parent?: Maybe<File | Folder>;
	permissions: Permissions;
	rootId?: Maybe<Scalars['ID']['output']>;
	share?: Maybe<Share>;
	shares: Array<Maybe<Share>>;
	type: NodeType;
	updated_at: Scalars['DateTime']['output'];
};

export type NodeShareArgs = {
	share_target_id: Scalars['ID']['input'];
};

export type NodeSharesArgs = {
	cursor?: InputMaybe<Scalars['String']['input']>;
	limit: Scalars['Int']['input'];
	sorts?: InputMaybe<Array<ShareSort>>;
};

export type NodePage = {
	__typename?: 'NodePage';
	nodes: Array<Maybe<File | Folder>>;
	page_token?: Maybe<Scalars['String']['output']>;
};

export enum NodeSort {
	LastEditorAsc = 'LAST_EDITOR_ASC',
	LastEditorDesc = 'LAST_EDITOR_DESC',
	NameAsc = 'NAME_ASC',
	NameDesc = 'NAME_DESC',
	OwnerAsc = 'OWNER_ASC',
	OwnerDesc = 'OWNER_DESC',
	SizeAsc = 'SIZE_ASC',
	SizeDesc = 'SIZE_DESC',
	TypeAsc = 'TYPE_ASC',
	TypeDesc = 'TYPE_DESC',
	UpdatedAtAsc = 'UPDATED_AT_ASC',
	UpdatedAtDesc = 'UPDATED_AT_DESC'
}

export enum NodeType {
	Application = 'APPLICATION',
	Audio = 'AUDIO',
	Folder = 'FOLDER',
	Image = 'IMAGE',
	Message = 'MESSAGE',
	Other = 'OTHER',
	Presentation = 'PRESENTATION',
	Root = 'ROOT',
	Spreadsheet = 'SPREADSHEET',
	Text = 'TEXT',
	Video = 'VIDEO'
}

export type Permissions = {
	__typename?: 'Permissions';
	can_add_version: Scalars['Boolean']['output'];
	can_change_link: Scalars['Boolean']['output'];
	can_change_share: Scalars['Boolean']['output'];
	can_delete: Scalars['Boolean']['output'];
	can_read: Scalars['Boolean']['output'];
	can_read_link: Scalars['Boolean']['output'];
	can_read_share: Scalars['Boolean']['output'];
	can_share: Scalars['Boolean']['output'];
	can_write_file: Scalars['Boolean']['output'];
	can_write_folder: Scalars['Boolean']['output'];
};

export type Query = {
	__typename?: 'Query';
	findNodes?: Maybe<NodePage>;
	getAccountByEmail?: Maybe<Account>;
	getAccountsByEmail: Array<Maybe<Account>>;
	getCollaborationLinks: Array<Maybe<CollaborationLink>>;
	getConfigs: Array<Maybe<Config>>;
	getLinks: Array<Maybe<Link>>;
	getNode?: Maybe<File | Folder>;
	getPath: Array<Maybe<File | Folder>>;
	getRootsList: Array<Maybe<Root>>;
	getShare?: Maybe<Share>;
	getUploadItem?: Maybe<Scalars['UploadItem']['output']>;
	getUploadItems: Array<Scalars['UploadItem']['output']>;
	getUserById?: Maybe<User>;
	getVersions: Array<Maybe<File>>;
};

export type QueryFindNodesArgs = {
	cascade?: InputMaybe<Scalars['Boolean']['input']>;
	direct_share?: InputMaybe<Scalars['Boolean']['input']>;
	flagged?: InputMaybe<Scalars['Boolean']['input']>;
	folder_id?: InputMaybe<Scalars['String']['input']>;
	keywords?: InputMaybe<Array<Scalars['String']['input']>>;
	limit?: InputMaybe<Scalars['Int']['input']>;
	owner_id?: InputMaybe<Scalars['String']['input']>;
	page_token?: InputMaybe<Scalars['String']['input']>;
	shared_by_me?: InputMaybe<Scalars['Boolean']['input']>;
	shared_with_me?: InputMaybe<Scalars['Boolean']['input']>;
	sort?: InputMaybe<NodeSort>;
	type?: InputMaybe<NodeType>;
};

export type QueryGetAccountByEmailArgs = {
	email: Scalars['String']['input'];
};

export type QueryGetAccountsByEmailArgs = {
	emails: Array<Scalars['String']['input']>;
};

export type QueryGetCollaborationLinksArgs = {
	node_id: Scalars['ID']['input'];
};

export type QueryGetLinksArgs = {
	node_id: Scalars['ID']['input'];
};

export type QueryGetNodeArgs = {
	node_id: Scalars['ID']['input'];
	version?: InputMaybe<Scalars['Int']['input']>;
};

export type QueryGetPathArgs = {
	node_id: Scalars['ID']['input'];
};

export type QueryGetShareArgs = {
	node_id: Scalars['ID']['input'];
	share_target_id: Scalars['ID']['input'];
};

export type QueryGetUploadItemArgs = {
	id: Scalars['ID']['input'];
};

export type QueryGetUploadItemsArgs = {
	parentId?: InputMaybe<Scalars['ID']['input']>;
};

export type QueryGetUserByIdArgs = {
	user_id: Scalars['ID']['input'];
};

export type QueryGetVersionsArgs = {
	node_id: Scalars['ID']['input'];
	versions?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type Root = {
	__typename?: 'Root';
	id: Scalars['ID']['output'];
	name: Scalars['String']['output'];
};

export type Share = {
	__typename?: 'Share';
	created_at: Scalars['DateTime']['output'];
	expires_at?: Maybe<Scalars['DateTime']['output']>;
	node: File | Folder;
	permission: SharePermission;
	share_target?: Maybe<SharedTarget>;
};

export enum SharePermission {
	ReadAndShare = 'READ_AND_SHARE',
	ReadAndWrite = 'READ_AND_WRITE',
	ReadOnly = 'READ_ONLY',
	ReadWriteAndShare = 'READ_WRITE_AND_SHARE'
}

export enum ShareSort {
	CreationAsc = 'CREATION_ASC',
	CreationDesc = 'CREATION_DESC',
	ExpirationAsc = 'EXPIRATION_ASC',
	ExpirationDesc = 'EXPIRATION_DESC',
	SharePermissionsAsc = 'SHARE_PERMISSIONS_ASC',
	SharePermissionsDesc = 'SHARE_PERMISSIONS_DESC',
	TargetUserAsc = 'TARGET_USER_ASC',
	TargetUserDesc = 'TARGET_USER_DESC'
}

export type SharedTarget = DistributionList | User;

export type User = {
	__typename?: 'User';
	email: Scalars['String']['output'];
	full_name: Scalars['String']['output'];
	id: Scalars['ID']['output'];
};

export type BaseNode_File_Fragment = {
	size: number;
	mime_type: string;
	extension?: string | null;
	version: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'File' };

export type BaseNode_Folder_Fragment = {
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'Folder' };

export type BaseNodeFragment = BaseNode_File_Fragment | BaseNode_Folder_Fragment;

export type Child_File_Fragment = {
	updated_at: number;
	size: number;
	mime_type: string;
	extension?: string | null;
	version: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	last_editor?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	shares: Array<
		| ({
				permission: SharePermission;
				created_at: number;
				node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
				share_target?:
					| ({ id: string; name: string } & { __typename?: 'DistributionList' })
					| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
					| null;
		  } & { __typename?: 'Share' })
		| null
	>;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'File' };

export type Child_Folder_Fragment = {
	updated_at: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	last_editor?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	shares: Array<
		| ({
				permission: SharePermission;
				created_at: number;
				node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
				share_target?:
					| ({ id: string; name: string } & { __typename?: 'DistributionList' })
					| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
					| null;
		  } & { __typename?: 'Share' })
		| null
	>;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'Folder' };

export type ChildFragment = Child_File_Fragment | Child_Folder_Fragment;

export type ChildWithParent_File_Fragment = {
	updated_at: number;
	size: number;
	mime_type: string;
	extension?: string | null;
	version: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	last_editor?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	shares: Array<
		| ({
				permission: SharePermission;
				created_at: number;
				node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
				share_target?:
					| ({ id: string; name: string } & { __typename?: 'DistributionList' })
					| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
					| null;
		  } & { __typename?: 'Share' })
		| null
	>;
	parent?:
		| ({
				id: string;
				name: string;
				type: NodeType;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' | 'Folder' })
		| null;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'File' };

export type ChildWithParent_Folder_Fragment = {
	updated_at: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	last_editor?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	shares: Array<
		| ({
				permission: SharePermission;
				created_at: number;
				node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
				share_target?:
					| ({ id: string; name: string } & { __typename?: 'DistributionList' })
					| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
					| null;
		  } & { __typename?: 'Share' })
		| null
	>;
	parent?:
		| ({
				id: string;
				name: string;
				type: NodeType;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' | 'Folder' })
		| null;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'Folder' };

export type ChildWithParentFragment =
	| ChildWithParent_File_Fragment
	| ChildWithParent_Folder_Fragment;

export type CollaborationLinkFragment = {
	id: string;
	url: string;
	permission: SharePermission;
	created_at: number;
	node: { id: string } & { __typename?: 'File' | 'Folder' };
} & { __typename?: 'CollaborationLink' };

export type LinkFragment = {
	id: string;
	url?: string | null;
	description?: string | null;
	expires_at?: number | null;
	created_at: number;
	node: { id: string } & { __typename?: 'File' | 'Folder' };
} & { __typename?: 'Link' };

export type NodeParentFragment = {
	parent?:
		| ({
				id: string;
				name: string;
				type: NodeType;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' | 'Folder' })
		| null;
} & { __typename?: 'File' | 'Folder' };

export type ParentFragment = {
	id: string;
	name: string;
	type: NodeType;
	owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'File' | 'Folder' };

export type ParentIdFragment = {
	parent?: ({ id: string } & { __typename?: 'File' | 'Folder' }) | null;
} & { __typename?: 'File' | 'Folder' };

export type PermissionsFragment = {
	permissions: {
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	} & { __typename?: 'Permissions' };
} & { __typename?: 'File' | 'Folder' };

export type ShareFragment = {
	permission: SharePermission;
	created_at: number;
	share_target?:
		| ({ id: string; name: string } & { __typename?: 'DistributionList' })
		| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
		| null;
} & { __typename?: 'Share' };

export type ShareTargetFragment = { id: string } & { __typename?: 'DistributionList' | 'User' };

export type CloneVersionMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	version: Scalars['Int']['input'];
}>;

export type CloneVersionMutation = {
	cloneVersion: {
		version: number;
		size: number;
		updated_at: number;
		keep_forever: boolean;
		cloned_from_version?: number | null;
		last_editor?:
			| ({ full_name: string; email: string; id: string } & { __typename?: 'User' })
			| null;
	} & { __typename?: 'File' };
} & { __typename?: 'Mutation' };

export type CopyNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
	destination_id: Scalars['ID']['input'];
	shares_limit?: InputMaybe<Scalars['Int']['input']>;
}>;

export type CopyNodesMutation = {
	copyNodes?: Array<
		| ({
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				parent?: ({ id: string; name: string } & { __typename?: 'File' | 'Folder' }) | null;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				last_editor?:
					| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' })
		| ({
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				parent?: ({ id: string; name: string } & { __typename?: 'File' | 'Folder' }) | null;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				last_editor?:
					| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'Folder' })
	> | null;
} & { __typename?: 'Mutation' };

export type CreateCollaborationLinkMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	permission: SharePermission;
}>;

export type CreateCollaborationLinkMutation = {
	createCollaborationLink: {
		id: string;
		url: string;
		permission: SharePermission;
		created_at: number;
		node: { id: string } & { __typename?: 'File' | 'Folder' };
	} & { __typename?: 'CollaborationLink' };
} & { __typename?: 'Mutation' };

export type CreateFolderMutationVariables = Exact<{
	destination_id: Scalars['String']['input'];
	name: Scalars['String']['input'];
	shares_limit?: InputMaybe<Scalars['Int']['input']>;
}>;

export type CreateFolderMutation = {
	createFolder:
		| ({
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				parent?: ({ id: string; name: string } & { __typename?: 'File' | 'Folder' }) | null;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				last_editor?:
					| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' })
		| ({
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				parent?: ({ id: string; name: string } & { __typename?: 'File' | 'Folder' }) | null;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				last_editor?:
					| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'Folder' });
} & { __typename?: 'Mutation' };

export type CreateLinkMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	description?: InputMaybe<Scalars['String']['input']>;
	expires_at?: InputMaybe<Scalars['DateTime']['input']>;
}>;

export type CreateLinkMutation = {
	createLink: {
		id: string;
		url?: string | null;
		description?: string | null;
		expires_at?: number | null;
		created_at: number;
		node: { id: string } & { __typename?: 'File' | 'Folder' };
	} & { __typename?: 'Link' };
} & { __typename?: 'Mutation' };

export type CreateShareMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	share_target_id: Scalars['ID']['input'];
	permission: SharePermission;
	custom_message?: InputMaybe<Scalars['String']['input']>;
}>;

export type CreateShareMutation = {
	createShare: {
		permission: SharePermission;
		created_at: number;
		share_target?:
			| ({ id: string; name: string } & { __typename?: 'DistributionList' })
			| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
			| null;
		node: { id: string } & { __typename?: 'File' | 'Folder' };
	} & { __typename?: 'Share' };
} & { __typename?: 'Mutation' };

export type DeleteCollaborationLinksMutationVariables = Exact<{
	collaboration_link_ids: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;

export type DeleteCollaborationLinksMutation = {
	deleteCollaborationLinks: Array<string | null>;
} & { __typename?: 'Mutation' };

export type DeleteLinksMutationVariables = Exact<{
	link_ids: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;

export type DeleteLinksMutation = { deleteLinks: Array<string | null> } & {
	__typename?: 'Mutation';
};

export type DeleteNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
}>;

export type DeleteNodesMutation = { deleteNodes?: Array<string> | null } & {
	__typename?: 'Mutation';
};

export type DeleteShareMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	share_target_id: Scalars['ID']['input'];
}>;

export type DeleteShareMutation = { deleteShare: boolean } & { __typename?: 'Mutation' };

export type DeleteVersionsMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	versions?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
}>;

export type DeleteVersionsMutation = { deleteVersions: Array<number | null> } & {
	__typename?: 'Mutation';
};

export type FlagNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
	flag: Scalars['Boolean']['input'];
}>;

export type FlagNodesMutation = { flagNodes?: Array<string> | null } & { __typename?: 'Mutation' };

export type KeepVersionsMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	versions: Array<Scalars['Int']['input']> | Scalars['Int']['input'];
	keep_forever: Scalars['Boolean']['input'];
}>;

export type KeepVersionsMutation = { keepVersions: Array<number | null> } & {
	__typename?: 'Mutation';
};

export type MoveNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
	destination_id: Scalars['ID']['input'];
}>;

export type MoveNodesMutation = {
	moveNodes?: Array<
		{ id: string; parent?: ({ id: string } & { __typename?: 'File' | 'Folder' }) | null } & {
			__typename?: 'File' | 'Folder';
		}
	> | null;
} & { __typename?: 'Mutation' };

export type RestoreNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
}>;

export type RestoreNodesMutation = {
	restoreNodes?: Array<
		| ({
				id: string;
				rootId?: string | null;
				parent?: ({ id: string } & { __typename?: 'File' | 'Folder' }) | null;
		  } & { __typename?: 'File' | 'Folder' })
		| null
	> | null;
} & { __typename?: 'Mutation' };

export type TrashNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
}>;

export type TrashNodesMutation = { trashNodes?: Array<string> | null } & {
	__typename?: 'Mutation';
};

export type UpdateLinkMutationVariables = Exact<{
	link_id: Scalars['ID']['input'];
	description?: InputMaybe<Scalars['String']['input']>;
	expires_at?: InputMaybe<Scalars['DateTime']['input']>;
}>;

export type UpdateLinkMutation = {
	updateLink?:
		| ({
				id: string;
				url?: string | null;
				description?: string | null;
				expires_at?: number | null;
				created_at: number;
		  } & { __typename?: 'Link' })
		| null;
} & { __typename?: 'Mutation' };

export type UpdateNodeMutationVariables = Exact<{
	node_id: Scalars['String']['input'];
	name?: InputMaybe<Scalars['String']['input']>;
	description?: InputMaybe<Scalars['String']['input']>;
}>;

export type UpdateNodeMutation = {
	updateNode: {
		id: string;
		name: string;
		description: string;
		parent?: ({ id: string } & { __typename?: 'File' | 'Folder' }) | null;
	} & { __typename?: 'File' | 'Folder' };
} & { __typename?: 'Mutation' };

export type UpdateNodeDescriptionMutationVariables = Exact<{
	node_id: Scalars['String']['input'];
	description?: InputMaybe<Scalars['String']['input']>;
}>;

export type UpdateNodeDescriptionMutation = {
	updateNode: { id: string; description: string } & { __typename?: 'File' | 'Folder' };
} & { __typename?: 'Mutation' };

export type UpdateShareMutationVariables = Exact<{
	node_id: Scalars['ID']['input'];
	share_target_id: Scalars['ID']['input'];
	permission: SharePermission;
}>;

export type UpdateShareMutation = {
	updateShare?:
		| ({
				permission: SharePermission;
				created_at: number;
				share_target?:
					| ({ id: string; name: string } & { __typename?: 'DistributionList' })
					| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
					| null;
				node: { id: string } & { __typename?: 'File' | 'Folder' };
		  } & { __typename?: 'Share' })
		| null;
} & { __typename?: 'Mutation' };

export type GetUploadItemQueryVariables = Exact<{
	id: Scalars['ID']['input'];
}>;

export type GetUploadItemQuery = { getUploadItem?: ClientTypes.UploadItem | null } & {
	__typename?: 'Query';
};

export type GetUploadItemsQueryVariables = Exact<{
	parentId?: InputMaybe<Scalars['ID']['input']>;
}>;

export type GetUploadItemsQuery = { getUploadItems: Array<ClientTypes.UploadItem> } & {
	__typename?: 'Query';
};

export type FindNodesQueryVariables = Exact<{
	keywords?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
	flagged?: InputMaybe<Scalars['Boolean']['input']>;
	shared_by_me?: InputMaybe<Scalars['Boolean']['input']>;
	shared_with_me?: InputMaybe<Scalars['Boolean']['input']>;
	folder_id?: InputMaybe<Scalars['String']['input']>;
	cascade?: InputMaybe<Scalars['Boolean']['input']>;
	limit: Scalars['Int']['input'];
	page_token?: InputMaybe<Scalars['String']['input']>;
	sort?: InputMaybe<NodeSort>;
	shares_limit?: InputMaybe<Scalars['Int']['input']>;
	direct_share?: InputMaybe<Scalars['Boolean']['input']>;
	owner_id?: InputMaybe<Scalars['String']['input']>;
	type?: InputMaybe<NodeType>;
}>;

export type FindNodesQuery = {
	findNodes?:
		| ({
				page_token?: string | null;
				nodes: Array<
					| ({
							updated_at: number;
							size: number;
							mime_type: string;
							extension?: string | null;
							version: number;
							id: string;
							name: string;
							type: NodeType;
							flagged: boolean;
							rootId?: string | null;
							owner?:
								| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
								| null;
							last_editor?:
								| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
								| null;
							shares: Array<
								| ({
										permission: SharePermission;
										created_at: number;
										node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
										share_target?:
											| ({ id: string; name: string } & { __typename?: 'DistributionList' })
											| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
											| null;
								  } & { __typename?: 'Share' })
								| null
							>;
							parent?:
								| ({
										id: string;
										name: string;
										type: NodeType;
										owner?:
											| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
											| null;
										permissions: {
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										} & { __typename?: 'Permissions' };
								  } & { __typename?: 'File' | 'Folder' })
								| null;
							permissions: {
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							} & { __typename?: 'Permissions' };
					  } & { __typename?: 'File' })
					| ({
							updated_at: number;
							id: string;
							name: string;
							type: NodeType;
							flagged: boolean;
							rootId?: string | null;
							owner?:
								| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
								| null;
							last_editor?:
								| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
								| null;
							shares: Array<
								| ({
										permission: SharePermission;
										created_at: number;
										node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
										share_target?:
											| ({ id: string; name: string } & { __typename?: 'DistributionList' })
											| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
											| null;
								  } & { __typename?: 'Share' })
								| null
							>;
							parent?:
								| ({
										id: string;
										name: string;
										type: NodeType;
										owner?:
											| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
											| null;
										permissions: {
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										} & { __typename?: 'Permissions' };
								  } & { __typename?: 'File' | 'Folder' })
								| null;
							permissions: {
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							} & { __typename?: 'Permissions' };
					  } & { __typename?: 'Folder' })
					| null
				>;
		  } & { __typename?: 'NodePage' })
		| null;
} & { __typename?: 'Query' };

export type GetAccountByEmailQueryVariables = Exact<{
	email: Scalars['String']['input'];
}>;

export type GetAccountByEmailQuery = {
	getAccountByEmail?: ({ id: string } & { __typename?: 'DistributionList' | 'User' }) | null;
} & { __typename?: 'Query' };

export type GetAccountsByEmailQueryVariables = Exact<{
	emails: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;

export type GetAccountsByEmailQuery = {
	getAccountsByEmail: Array<
		| ({ id: string; name: string } & { __typename?: 'DistributionList' })
		| ({ id: string; email: string; full_name: string } & { __typename?: 'User' })
		| null
	>;
} & { __typename?: 'Query' };

export type GetBaseNodeQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
}>;

export type GetBaseNodeQuery = {
	getNode?:
		| ({
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' })
		| ({
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetChildQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
	shares_limit?: InputMaybe<Scalars['Int']['input']>;
}>;

export type GetChildQuery = {
	getNode?:
		| ({
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				last_editor?:
					| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				parent?:
					| ({
							id: string;
							name: string;
							type: NodeType;
							owner?:
								| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
								| null;
							permissions: {
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							} & { __typename?: 'Permissions' };
					  } & { __typename?: 'File' | 'Folder' })
					| null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' })
		| ({
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				last_editor?:
					| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				parent?:
					| ({
							id: string;
							name: string;
							type: NodeType;
							owner?:
								| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
								| null;
							permissions: {
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							} & { __typename?: 'Permissions' };
					  } & { __typename?: 'File' | 'Folder' })
					| null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetChildrenQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
	children_limit: Scalars['Int']['input'];
	page_token?: InputMaybe<Scalars['String']['input']>;
	sort: NodeSort;
	shares_limit?: InputMaybe<Scalars['Int']['input']>;
}>;

export type GetChildrenQuery = {
	getNode?:
		| ({
				id: string;
				name: string;
				type: NodeType;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' })
		| ({
				id: string;
				name: string;
				type: NodeType;
				children: {
					page_token?: string | null;
					nodes: Array<
						| ({
								updated_at: number;
								size: number;
								mime_type: string;
								extension?: string | null;
								version: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								last_editor?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								shares: Array<
									| ({
											permission: SharePermission;
											created_at: number;
											node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
											share_target?:
												| ({ id: string; name: string } & { __typename?: 'DistributionList' })
												| ({ email: string; full_name: string; id: string } & {
														__typename?: 'User';
												  })
												| null;
									  } & { __typename?: 'Share' })
									| null
								>;
								parent?:
									| ({
											id: string;
											name: string;
											type: NodeType;
											owner?:
												| ({ id: string; full_name: string; email: string } & {
														__typename?: 'User';
												  })
												| null;
											permissions: {
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											} & { __typename?: 'Permissions' };
									  } & { __typename?: 'File' | 'Folder' })
									| null;
								permissions: {
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								} & { __typename?: 'Permissions' };
						  } & { __typename?: 'File' })
						| ({
								updated_at: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								last_editor?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								shares: Array<
									| ({
											permission: SharePermission;
											created_at: number;
											node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
											share_target?:
												| ({ id: string; name: string } & { __typename?: 'DistributionList' })
												| ({ email: string; full_name: string; id: string } & {
														__typename?: 'User';
												  })
												| null;
									  } & { __typename?: 'Share' })
									| null
								>;
								parent?:
									| ({
											id: string;
											name: string;
											type: NodeType;
											owner?:
												| ({ id: string; full_name: string; email: string } & {
														__typename?: 'User';
												  })
												| null;
											permissions: {
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											} & { __typename?: 'Permissions' };
									  } & { __typename?: 'File' | 'Folder' })
									| null;
								permissions: {
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								} & { __typename?: 'Permissions' };
						  } & { __typename?: 'Folder' })
						| null
					>;
				} & { __typename?: 'NodePage' };
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetChildrenParentQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
}>;

export type GetChildrenParentQuery = {
	getNode?:
		| ({
				id: string;
				name: string;
				type: NodeType;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' | 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetCollaborationLinksQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
}>;

export type GetCollaborationLinksQuery = {
	getCollaborationLinks: Array<
		| ({
				id: string;
				url: string;
				permission: SharePermission;
				created_at: number;
				node: { id: string } & { __typename?: 'File' | 'Folder' };
		  } & { __typename?: 'CollaborationLink' })
		| null
	>;
} & { __typename?: 'Query' };

export type GetConfigsQueryVariables = Exact<{ [key: string]: never }>;

export type GetConfigsQuery = {
	getConfigs: Array<({ name: string; value: string } & { __typename?: 'Config' }) | null>;
} & { __typename?: 'Query' };

export type GetLinksQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
}>;

export type GetLinksQuery = {
	getLinks: Array<
		| ({
				id: string;
				url?: string | null;
				description?: string | null;
				expires_at?: number | null;
				created_at: number;
				node: { id: string } & { __typename?: 'File' | 'Folder' };
		  } & { __typename?: 'Link' })
		| null
	>;
} & { __typename?: 'Query' };

export type GetNodeQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
	children_limit: Scalars['Int']['input'];
	page_token?: InputMaybe<Scalars['String']['input']>;
	sort: NodeSort;
	shares_limit: Scalars['Int']['input'];
	shares_cursor?: InputMaybe<Scalars['String']['input']>;
	shares_sorts?: InputMaybe<Array<ShareSort> | ShareSort>;
}>;

export type GetNodeQuery = {
	getNode?:
		| ({
				description: string;
				created_at: number;
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner?: ({ id: string; email: string; full_name: string } & { __typename?: 'User' }) | null;
				creator: { id: string; email: string; full_name: string } & { __typename?: 'User' };
				last_editor?:
					| ({ id: string; email: string; full_name: string } & { __typename?: 'User' })
					| null;
				parent?:
					| ({
							id: string;
							name: string;
							permissions: {
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							} & { __typename?: 'Permissions' };
					  } & { __typename?: 'File' | 'Folder' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' })
		| ({
				description: string;
				created_at: number;
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				children: {
					page_token?: string | null;
					nodes: Array<
						| ({
								updated_at: number;
								size: number;
								mime_type: string;
								extension?: string | null;
								version: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								last_editor?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								shares: Array<
									| ({
											permission: SharePermission;
											created_at: number;
											node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
											share_target?:
												| ({ id: string; name: string } & { __typename?: 'DistributionList' })
												| ({ email: string; full_name: string; id: string } & {
														__typename?: 'User';
												  })
												| null;
									  } & { __typename?: 'Share' })
									| null
								>;
								parent?:
									| ({
											id: string;
											name: string;
											type: NodeType;
											owner?:
												| ({ id: string; full_name: string; email: string } & {
														__typename?: 'User';
												  })
												| null;
											permissions: {
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											} & { __typename?: 'Permissions' };
									  } & { __typename?: 'File' | 'Folder' })
									| null;
								permissions: {
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								} & { __typename?: 'Permissions' };
						  } & { __typename?: 'File' })
						| ({
								updated_at: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								last_editor?:
									| ({ id: string; full_name: string; email: string } & { __typename?: 'User' })
									| null;
								shares: Array<
									| ({
											permission: SharePermission;
											created_at: number;
											node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
											share_target?:
												| ({ id: string; name: string } & { __typename?: 'DistributionList' })
												| ({ email: string; full_name: string; id: string } & {
														__typename?: 'User';
												  })
												| null;
									  } & { __typename?: 'Share' })
									| null
								>;
								parent?:
									| ({
											id: string;
											name: string;
											type: NodeType;
											owner?:
												| ({ id: string; full_name: string; email: string } & {
														__typename?: 'User';
												  })
												| null;
											permissions: {
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											} & { __typename?: 'Permissions' };
									  } & { __typename?: 'File' | 'Folder' })
									| null;
								permissions: {
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								} & { __typename?: 'Permissions' };
						  } & { __typename?: 'Folder' })
						| null
					>;
				} & { __typename?: 'NodePage' };
				owner?: ({ id: string; email: string; full_name: string } & { __typename?: 'User' }) | null;
				creator: { id: string; email: string; full_name: string } & { __typename?: 'User' };
				last_editor?:
					| ({ id: string; email: string; full_name: string } & { __typename?: 'User' })
					| null;
				parent?:
					| ({
							id: string;
							name: string;
							permissions: {
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							} & { __typename?: 'Permissions' };
					  } & { __typename?: 'File' | 'Folder' })
					| null;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetPathQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
}>;

export type GetPathQuery = {
	getPath: Array<
		| ({
				id: string;
				name: string;
				type: NodeType;
				owner?: ({ id: string; full_name: string; email: string } & { __typename?: 'User' }) | null;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' | 'Folder' })
		| null
	>;
} & { __typename?: 'Query' };

export type GetPermissionsQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
}>;

export type GetPermissionsQuery = {
	getNode?:
		| ({
				id: string;
				permissions: {
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				} & { __typename?: 'Permissions' };
		  } & { __typename?: 'File' | 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetRootsListQueryVariables = Exact<{ [key: string]: never }>;

export type GetRootsListQuery = {
	getRootsList: Array<({ id: string; name: string } & { __typename?: 'Root' }) | null>;
} & { __typename?: 'Query' };

export type GetSharesQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
	shares_limit: Scalars['Int']['input'];
	shares_cursor?: InputMaybe<Scalars['String']['input']>;
	shares_sorts?: InputMaybe<Array<ShareSort> | ShareSort>;
}>;

export type GetSharesQuery = {
	getNode?:
		| ({
				id: string;
				type: NodeType;
				shares: Array<
					| ({
							permission: SharePermission;
							created_at: number;
							node: { id: string; type: NodeType } & { __typename?: 'File' | 'Folder' };
							share_target?:
								| ({ id: string; name: string } & { __typename?: 'DistributionList' })
								| ({ email: string; full_name: string; id: string } & { __typename?: 'User' })
								| null;
					  } & { __typename?: 'Share' })
					| null
				>;
		  } & { __typename?: 'File' | 'Folder' })
		| null;
} & { __typename?: 'Query' };

export type GetVersionsQueryVariables = Exact<{
	node_id: Scalars['ID']['input'];
	versions?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
}>;

export type GetVersionsQuery = {
	getVersions: Array<
		| ({
				version: number;
				size: number;
				updated_at: number;
				keep_forever: boolean;
				cloned_from_version?: number | null;
				last_editor?:
					| ({ full_name: string; email: string; id: string } & { __typename?: 'User' })
					| null;
		  } & { __typename?: 'File' })
		| null
	>;
} & { __typename?: 'Query' };

export const PermissionsFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<PermissionsFragment, unknown>;
export const BaseNodeFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<BaseNodeFragment, unknown>;
export const ShareFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		}
	]
} as unknown as DocumentNode<ShareFragment, unknown>;
export const ChildFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		}
	]
} as unknown as DocumentNode<ChildFragment, unknown>;
export const ParentFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<ParentFragment, unknown>;
export const NodeParentFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'NodeParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		}
	]
} as unknown as DocumentNode<NodeParentFragment, unknown>;
export const ChildWithParentFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'ChildWithParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Child' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'NodeParent' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'NodeParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<ChildWithParentFragment, unknown>;
export const CollaborationLinkFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'CollaborationLink' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'CollaborationLink' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'node' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<CollaborationLinkFragment, unknown>;
export const LinkFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Link' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Link' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'description' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'expires_at' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'node' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<LinkFragment, unknown>;
export const ParentIdFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'ParentId' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<ParentIdFragment, unknown>;
export const ShareTargetFragmentDoc = {
	kind: 'Document',
	definitions: [
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'ShareTarget' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'SharedTarget' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'DistributionList' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					},
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<ShareTargetFragment, unknown>;
export const CloneVersionDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'cloneVersion' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'version' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'cloneVersion' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'version' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'version' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'last_editor' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'keep_forever' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'cloned_from_version' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<CloneVersionMutation, CloneVersionMutationVariables>;
export const CopyNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'copyNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
						}
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'destination_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
					defaultValue: { kind: 'IntValue', value: '1' }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'copyNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'destination_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'destination_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Child' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'parent' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<CopyNodesMutation, CopyNodesMutationVariables>;
export const CreateCollaborationLinkDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'createCollaborationLink' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'permission' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'SharePermission' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'createCollaborationLink' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'permission' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'permission' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'CollaborationLink' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'CollaborationLink' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'CollaborationLink' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'node' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<
	CreateCollaborationLinkMutation,
	CreateCollaborationLinkMutationVariables
>;
export const CreateFolderDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'createFolder' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'destination_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
					defaultValue: { kind: 'IntValue', value: '1' }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'createFolder' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'destination_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'destination_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'name' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'name' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Child' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'parent' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<CreateFolderMutation, CreateFolderMutationVariables>;
export const CreateLinkDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'createLink' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'description' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'expires_at' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'DateTime' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'createLink' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'description' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'description' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'expires_at' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'expires_at' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Link' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Link' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Link' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'description' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'expires_at' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'node' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<CreateLinkMutation, CreateLinkMutationVariables>;
export const CreateShareDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'createShare' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'share_target_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'permission' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'SharePermission' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'custom_message' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'createShare' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'share_target_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'share_target_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'permission' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'permission' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'custom_message' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'custom_message' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'share_target' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{
												kind: 'InlineFragment',
												typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
													]
												}
											},
											{
												kind: 'InlineFragment',
												typeCondition: {
													kind: 'NamedType',
													name: { kind: 'Name', value: 'DistributionList' }
												},
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
													]
												}
											}
										]
									}
								},
								{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<CreateShareMutation, CreateShareMutationVariables>;
export const DeleteCollaborationLinksDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'deleteCollaborationLinks' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'collaboration_link_ids' } },
					type: {
						kind: 'NonNullType',
						type: {
							kind: 'ListType',
							type: {
								kind: 'NonNullType',
								type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
							}
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'deleteCollaborationLinks' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'collaboration_link_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'collaboration_link_ids' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<
	DeleteCollaborationLinksMutation,
	DeleteCollaborationLinksMutationVariables
>;
export const DeleteLinksDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'deleteLinks' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'link_ids' } },
					type: {
						kind: 'NonNullType',
						type: {
							kind: 'ListType',
							type: {
								kind: 'NonNullType',
								type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
							}
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'deleteLinks' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'link_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'link_ids' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<DeleteLinksMutation, DeleteLinksMutationVariables>;
export const DeleteNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'deleteNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'deleteNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<DeleteNodesMutation, DeleteNodesMutationVariables>;
export const DeleteShareDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'deleteShare' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'share_target_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'deleteShare' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'share_target_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'share_target_id' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<DeleteShareMutation, DeleteShareMutationVariables>;
export const DeleteVersionsDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'deleteVersions' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'versions' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'deleteVersions' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'versions' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'versions' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<DeleteVersionsMutation, DeleteVersionsMutationVariables>;
export const FlagNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'flagNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
						}
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'flag' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'flagNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'flag' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'flag' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<FlagNodesMutation, FlagNodesMutationVariables>;
export const KeepVersionsDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'keepVersions' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'versions' } },
					type: {
						kind: 'NonNullType',
						type: {
							kind: 'ListType',
							type: {
								kind: 'NonNullType',
								type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
							}
						}
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'keep_forever' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'keepVersions' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'versions' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'versions' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'keep_forever' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'keep_forever' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<KeepVersionsMutation, KeepVersionsMutationVariables>;
export const MoveNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'moveNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
						}
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'destination_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'moveNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'destination_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'destination_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'parent' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<MoveNodesMutation, MoveNodesMutationVariables>;
export const RestoreNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'restoreNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'restoreNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'parent' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<RestoreNodesMutation, RestoreNodesMutationVariables>;
export const TrashNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'trashNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'trashNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_ids' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_ids' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<TrashNodesMutation, TrashNodesMutationVariables>;
export const UpdateLinkDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'updateLink' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'link_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'description' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'expires_at' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'DateTime' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'updateLink' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'link_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'link_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'description' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'description' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'expires_at' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'expires_at' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'description' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'expires_at' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<UpdateLinkMutation, UpdateLinkMutationVariables>;
export const UpdateNodeDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'updateNode' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'description' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'updateNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'name' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'name' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'description' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'description' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'description' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'parent' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<UpdateNodeMutation, UpdateNodeMutationVariables>;
export const UpdateNodeDescriptionDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'updateNodeDescription' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'description' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'updateNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'description' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'description' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'description' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<UpdateNodeDescriptionMutation, UpdateNodeDescriptionMutationVariables>;
export const UpdateShareDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'mutation',
			name: { kind: 'Name', value: 'updateShare' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'share_target_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'permission' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'SharePermission' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'updateShare' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'share_target_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'share_target_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'permission' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'permission' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'share_target' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{
												kind: 'InlineFragment',
												typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
													]
												}
											},
											{
												kind: 'InlineFragment',
												typeCondition: {
													kind: 'NamedType',
													name: { kind: 'Name', value: 'DistributionList' }
												},
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
													]
												}
											}
										]
									}
								},
								{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<UpdateShareMutation, UpdateShareMutationVariables>;
export const GetUploadItemDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getUploadItem' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getUploadItem' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetUploadItemQuery, GetUploadItemQueryVariables>;
export const GetUploadItemsDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getUploadItems' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'parentId' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getUploadItems' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'parentId' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'parentId' } }
							}
						]
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetUploadItemsQuery, GetUploadItemsQueryVariables>;
export const FindNodesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'findNodes' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'keywords' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
						}
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'flagged' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shared_by_me' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shared_with_me' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'folder_id' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'cascade' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'limit' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'page_token' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'sort' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'NodeSort' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
					defaultValue: { kind: 'IntValue', value: '1' }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'direct_share' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Boolean' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'owner_id' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'type' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'NodeType' } }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'findNodes' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'keywords' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'keywords' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'flagged' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'flagged' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'shared_by_me' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shared_by_me' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'shared_with_me' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shared_with_me' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'folder_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'folder_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'cascade' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'cascade' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'limit' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'page_token' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'page_token' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'sort' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'sort' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'direct_share' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'direct_share' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'owner_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'owner_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'type' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'type' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'nodes' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'ChildWithParent' } }
										]
									}
								},
								{ kind: 'Field', name: { kind: 'Name', value: 'page_token' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'NodeParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'ChildWithParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Child' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'NodeParent' } }
				]
			}
		}
	]
} as unknown as DocumentNode<FindNodesQuery, FindNodesQueryVariables>;
export const GetAccountByEmailDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getAccountByEmail' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'email' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getAccountByEmail' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'email' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'email' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetAccountByEmailQuery, GetAccountByEmailQueryVariables>;
export const GetAccountsByEmailDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getAccountsByEmail' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'emails' } },
					type: {
						kind: 'NonNullType',
						type: {
							kind: 'ListType',
							type: {
								kind: 'NonNullType',
								type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
							}
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getAccountsByEmail' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'emails' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'emails' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetAccountsByEmailQuery, GetAccountsByEmailQueryVariables>;
export const GetBaseNodeDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getBaseNode' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		}
	]
} as unknown as DocumentNode<GetBaseNodeQuery, GetBaseNodeQueryVariables>;
export const GetChildDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getChild' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
					defaultValue: { kind: 'IntValue', value: '1' }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'ChildWithParent' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'NodeParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'ChildWithParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Child' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'NodeParent' } }
				]
			}
		}
	]
} as unknown as DocumentNode<GetChildQuery, GetChildQueryVariables>;
export const GetChildrenDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getChildren' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'children_limit' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'page_token' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'sort' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'NodeSort' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
					defaultValue: { kind: 'IntValue', value: '1' }
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } },
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Folder' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{
												kind: 'Field',
												name: { kind: 'Name', value: 'children' },
												arguments: [
													{
														kind: 'Argument',
														name: { kind: 'Name', value: 'limit' },
														value: {
															kind: 'Variable',
															name: { kind: 'Name', value: 'children_limit' }
														}
													},
													{
														kind: 'Argument',
														name: { kind: 'Name', value: 'page_token' },
														value: { kind: 'Variable', name: { kind: 'Name', value: 'page_token' } }
													},
													{
														kind: 'Argument',
														name: { kind: 'Name', value: 'sort' },
														value: { kind: 'Variable', name: { kind: 'Name', value: 'sort' } }
													}
												],
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{
															kind: 'Field',
															name: { kind: 'Name', value: 'nodes' },
															selectionSet: {
																kind: 'SelectionSet',
																selections: [
																	{
																		kind: 'FragmentSpread',
																		name: { kind: 'Name', value: 'Child' }
																	},
																	{
																		kind: 'FragmentSpread',
																		name: { kind: 'Name', value: 'NodeParent' },
																		directives: [
																			{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }
																		]
																	}
																]
															}
														},
														{ kind: 'Field', name: { kind: 'Name', value: 'page_token' } }
													]
												}
											}
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'NodeParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetChildrenQuery, GetChildrenQueryVariables>;
export const GetChildrenParentDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getChildrenParent' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		}
	]
} as unknown as DocumentNode<GetChildrenParentQuery, GetChildrenParentQueryVariables>;
export const GetCollaborationLinksDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getCollaborationLinks' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getCollaborationLinks' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'CollaborationLink' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'CollaborationLink' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'CollaborationLink' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'node' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetCollaborationLinksQuery, GetCollaborationLinksQueryVariables>;
export const GetConfigsDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getConfigs' },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getConfigs' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'value' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetConfigsQuery, GetConfigsQueryVariables>;
export const GetLinksDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getLinks' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getLinks' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Link' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Link' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Link' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'url' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'description' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'expires_at' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'node' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetLinksQuery, GetLinksQueryVariables>;
export const GetNodeDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getNode' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'children_limit' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'page_token' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'sort' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'NodeSort' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_cursor' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_sorts' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ShareSort' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'description' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'owner' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } }
										]
									}
								},
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'creator' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } }
										]
									}
								},
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'last_editor' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } }
										]
									}
								},
								{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'parent' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
											{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
										]
									}
								},
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'shares' },
									arguments: [
										{
											kind: 'Argument',
											name: { kind: 'Name', value: 'limit' },
											value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
										},
										{
											kind: 'Argument',
											name: { kind: 'Name', value: 'cursor' },
											value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_cursor' } }
										},
										{
											kind: 'Argument',
											name: { kind: 'Name', value: 'sorts' },
											value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_sorts' } }
										}
									],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
											{
												kind: 'Field',
												name: { kind: 'Name', value: 'node' },
												directives: [
													{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }
												],
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
													]
												}
											}
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Folder' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{
												kind: 'Field',
												name: { kind: 'Name', value: 'children' },
												arguments: [
													{
														kind: 'Argument',
														name: { kind: 'Name', value: 'limit' },
														value: {
															kind: 'Variable',
															name: { kind: 'Name', value: 'children_limit' }
														}
													},
													{
														kind: 'Argument',
														name: { kind: 'Name', value: 'page_token' },
														value: { kind: 'Variable', name: { kind: 'Name', value: 'page_token' } }
													},
													{
														kind: 'Argument',
														name: { kind: 'Name', value: 'sort' },
														value: { kind: 'Variable', name: { kind: 'Name', value: 'sort' } }
													}
												],
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{
															kind: 'Field',
															name: { kind: 'Name', value: 'nodes' },
															selectionSet: {
																kind: 'SelectionSet',
																selections: [
																	{
																		kind: 'FragmentSpread',
																		name: { kind: 'Name', value: 'Child' }
																	},
																	{
																		kind: 'FragmentSpread',
																		name: { kind: 'Name', value: 'NodeParent' },
																		directives: [
																			{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }
																		]
																	}
																]
															}
														},
														{ kind: 'Field', name: { kind: 'Name', value: 'page_token' } }
													]
												}
											}
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'BaseNode' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } },
					{
						kind: 'InlineFragment',
						typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'File' } },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'mime_type' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'extension' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'flagged' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'rootId' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Child' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'BaseNode' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'last_editor' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'shares' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'limit' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'node' },
									directives: [{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'NodeParent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'parent' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetNodeQuery, GetNodeQueryVariables>;
export const GetPathDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getPath' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getPath' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Parent' } }]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Parent' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'name' } },
					{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'owner' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'email' } }
							]
						}
					},
					{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
				]
			}
		}
	]
} as unknown as DocumentNode<GetPathQuery, GetPathQueryVariables>;
export const GetPermissionsDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getPermissions' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Permissions' } }
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Permissions' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'permissions' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_file' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_write_folder' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_delete' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_add_version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_link' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_read_share' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'can_change_share' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetPermissionsQuery, GetPermissionsQueryVariables>;
export const GetRootsListDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getRootsList' },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getRootsList' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetRootsListQuery, GetRootsListQueryVariables>;
export const GetSharesDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getShares' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_cursor' } },
					type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } }
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'shares_sorts' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'ShareSort' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getNode' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'type' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'shares' },
									arguments: [
										{
											kind: 'Argument',
											name: { kind: 'Name', value: 'limit' },
											value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_limit' } }
										},
										{
											kind: 'Argument',
											name: { kind: 'Name', value: 'cursor' },
											value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_cursor' } }
										},
										{
											kind: 'Argument',
											name: { kind: 'Name', value: 'sorts' },
											value: { kind: 'Variable', name: { kind: 'Name', value: 'shares_sorts' } }
										}
									],
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Share' } },
											{
												kind: 'Field',
												name: { kind: 'Name', value: 'node' },
												directives: [
													{ kind: 'Directive', name: { kind: 'Name', value: 'client' } }
												],
												selectionSet: {
													kind: 'SelectionSet',
													selections: [
														{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
														{ kind: 'Field', name: { kind: 'Name', value: 'type' } }
													]
												}
											}
										]
									}
								}
							]
						}
					}
				]
			}
		},
		{
			kind: 'FragmentDefinition',
			name: { kind: 'Name', value: 'Share' },
			typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Share' } },
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{ kind: 'Field', name: { kind: 'Name', value: 'permission' } },
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'share_target' },
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{
									kind: 'InlineFragment',
									typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'User' } },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{
									kind: 'InlineFragment',
									typeCondition: {
										kind: 'NamedType',
										name: { kind: 'Name', value: 'DistributionList' }
									},
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'name' } }
										]
									}
								}
							]
						}
					},
					{ kind: 'Field', name: { kind: 'Name', value: 'created_at' } }
				]
			}
		}
	]
} as unknown as DocumentNode<GetSharesQuery, GetSharesQueryVariables>;
export const GetVersionsDocument = {
	kind: 'Document',
	definitions: [
		{
			kind: 'OperationDefinition',
			operation: 'query',
			name: { kind: 'Name', value: 'getVersions' },
			variableDefinitions: [
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } },
					type: {
						kind: 'NonNullType',
						type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }
					}
				},
				{
					kind: 'VariableDefinition',
					variable: { kind: 'Variable', name: { kind: 'Name', value: 'versions' } },
					type: {
						kind: 'ListType',
						type: {
							kind: 'NonNullType',
							type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } }
						}
					}
				}
			],
			selectionSet: {
				kind: 'SelectionSet',
				selections: [
					{
						kind: 'Field',
						name: { kind: 'Name', value: 'getVersions' },
						arguments: [
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'node_id' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'node_id' } }
							},
							{
								kind: 'Argument',
								name: { kind: 'Name', value: 'versions' },
								value: { kind: 'Variable', name: { kind: 'Name', value: 'versions' } }
							}
						],
						selectionSet: {
							kind: 'SelectionSet',
							selections: [
								{ kind: 'Field', name: { kind: 'Name', value: 'version' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'size' } },
								{
									kind: 'Field',
									name: { kind: 'Name', value: 'last_editor' },
									selectionSet: {
										kind: 'SelectionSet',
										selections: [
											{ kind: 'Field', name: { kind: 'Name', value: 'full_name' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'email' } },
											{ kind: 'Field', name: { kind: 'Name', value: 'id' } }
										]
									}
								},
								{ kind: 'Field', name: { kind: 'Name', value: 'updated_at' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'keep_forever' } },
								{ kind: 'Field', name: { kind: 'Name', value: 'cloned_from_version' } }
							]
						}
					}
				]
			}
		}
	]
} as unknown as DocumentNode<GetVersionsQuery, GetVersionsQueryVariables>;
