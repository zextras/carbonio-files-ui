" THIS FILE IS AUTOGENERATED BY GRAPHQL-CODEGEN. DO NOT EDIT! "
union Account = DistributionList | User

type CollaborationLink {
	created_at: DateTime!
	id: ID!
	node: Node!
	permission: SharePermission!
	url: String!
}

type Config {
	name: String!
	value: String!
}

scalar DateTime

type DistributionList {
	id: ID!
	name: String!
	users(cursor: String, limit: Int!): [User]!
}

type File implements Node {
	cloned_from_version: Int
	collaboration_links: [CollaborationLink]!
	created_at: DateTime!
	creator: User!
	description: String!
	extension: String
	flagged: Boolean!
	id: ID!
	keep_forever: Boolean!
	last_editor: User
	links: [Link]!
	mime_type: String!
	name: String!
	owner: User!
	parent: Node
	permissions: Permissions!
	rootId: ID
	share(share_target_id: ID!): Share
	shares(cursor: String, limit: Int!, sorts: [ShareSort!]): [Share]!
	size: Float!
	type: NodeType!
	updated_at: DateTime!
	version: Int!
}

type Folder implements Node {
	children(limit: Int!, page_token: String, sort: NodeSort!): NodePage!
	collaboration_links: [CollaborationLink]!
	created_at: DateTime!
	creator: User!
	description: String!
	flagged: Boolean!
	id: ID!
	last_editor: User
	links: [Link]!
	name: String!
	owner: User!
	parent: Node
	permissions: Permissions!
	rootId: ID
	share(share_target_id: ID!): Share
	shares(cursor: String, limit: Int!, sorts: [ShareSort!]): [Share]!
	type: NodeType!
	updated_at: DateTime!
}

type Link {
	created_at: DateTime!
	description: String
	expires_at: DateTime
	id: ID!
	node: Node!
	url: String
}

type Mutation {
	cloneVersion(node_id: ID!, version: Int!): File!
	copyNodes(destination_id: ID!, node_ids: [ID!]): [Node!]
	createCollaborationLink(node_id: ID!, permission: SharePermission!): CollaborationLink!
	createFolder(destination_id: String!, name: String!): Node!
	createLink(description: String, expires_at: DateTime, node_id: ID!): Link!
	createShare(
		custom_message: String
		expires_at: DateTime
		node_id: ID!
		permission: SharePermission!
		share_target_id: ID!
	): Share!
	deleteCollaborationLinks(collaboration_link_ids: [ID!]!): [ID]!
	deleteLinks(link_ids: [ID!]!): [ID]!
	deleteNodes(node_ids: [ID!]): [ID!]
	deleteShare(node_id: ID!, share_target_id: ID!): Boolean!
	deleteVersions(node_id: ID!, versions: [Int!]): [Int]!
	flagNodes(flag: Boolean!, node_ids: [ID!]): [ID!]
	keepVersions(keep_forever: Boolean!, node_id: ID!, versions: [Int!]!): [Int]!
	moveNodes(destination_id: ID!, node_ids: [ID!]): [Node!]
	restoreNodes(node_ids: [ID!]): [Node]
	trashNodes(node_ids: [ID!]): [ID!]
	updateLink(description: String, expires_at: DateTime, link_id: ID!): Link
	updateNode(description: String, flagged: Boolean, name: String, node_id: String!): Node!
	updateShare(
		expires_at: DateTime
		node_id: ID!
		permission: SharePermission
		share_target_id: ID!
	): Share
}

interface Node {
	collaboration_links: [CollaborationLink]!
	created_at: DateTime!
	creator: User!
	description: String!
	flagged: Boolean!
	id: ID!
	last_editor: User
	links: [Link]!
	name: String!
	owner: User!
	parent: Node
	permissions: Permissions!
	rootId: ID
	share(share_target_id: ID!): Share
	shares(cursor: String, limit: Int!, sorts: [ShareSort!]): [Share]!
	type: NodeType!
	updated_at: DateTime!
}

type NodePage {
	nodes: [Node]!
	page_token: String
}

enum NodeSort {
	LAST_EDITOR_ASC
	LAST_EDITOR_DESC
	NAME_ASC
	NAME_DESC
	OWNER_ASC
	OWNER_DESC
	SIZE_ASC
	SIZE_DESC
	TYPE_ASC
	TYPE_DESC
	UPDATED_AT_ASC
	UPDATED_AT_DESC
}

enum NodeType {
	APPLICATION
	AUDIO
	FOLDER
	IMAGE
	MESSAGE
	OTHER
	PRESENTATION
	ROOT
	SPREADSHEET
	TEXT
	VIDEO
}

type Permissions {
	can_add_version: Boolean!
	can_change_link: Boolean!
	can_change_share: Boolean!
	can_delete: Boolean!
	can_read: Boolean!
	can_read_link: Boolean!
	can_read_share: Boolean!
	can_share: Boolean!
	can_write_file: Boolean!
	can_write_folder: Boolean!
}

type Query {
	findNodes(
		cascade: Boolean
		direct_share: Boolean
		flagged: Boolean
		folder_id: String
		keywords: [String!]
		limit: Int
		owner_id: String
		page_token: String
		shared_by_me: Boolean
		shared_with_me: Boolean
		sort: NodeSort
		type: NodeType
	): NodePage
	getAccountByEmail(email: String!): Account
	getAccountsByEmail(emails: [String!]!): [Account]!
	getCollaborationLinks(node_id: ID!): [CollaborationLink]!
	getConfigs: [Config]!
	getLinks(node_id: ID!): [Link]!
	getNode(node_id: ID!, version: Int): Node
	getPath(node_id: ID!): [Node]!
	getRootsList: [Root]!
	getShare(node_id: ID!, share_target_id: ID!): Share
	getUserById(user_id: ID!): User
	getVersions(node_id: ID!, versions: [Int!]): [File]!
}

type Root {
	id: ID!
	name: String!
}

type Share {
	created_at: DateTime!
	expires_at: DateTime
	node: Node!
	permission: SharePermission!
	share_target: SharedTarget
}

enum SharePermission {
	READ_AND_SHARE
	READ_AND_WRITE
	READ_ONLY
	READ_WRITE_AND_SHARE
}

enum ShareSort {
	CREATION_ASC
	CREATION_DESC
	EXPIRATION_ASC
	EXPIRATION_DESC
	SHARE_PERMISSIONS_ASC
	SHARE_PERMISSIONS_DESC
	TARGET_USER_ASC
	TARGET_USER_DESC
}

union SharedTarget = DistributionList | User

type User {
	email: String!
	full_name: String!
	id: ID!
}
